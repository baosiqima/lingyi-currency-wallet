<Playlist Version="1.0"><Add Test="CoinExchange.Trades.Domain.Model.Tests.LimitOrderBookTests.SellMarketOrderReject_CHecksIfOrderGetsRejectedWhenNoLimitOrdersAreOnBook_VerifiesThroughOrdersState" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.TradeControllerTests.GetTradeDetails_SendMatchingOrdersWithDifferentTraders_TradeDetailsShouldGetReceived" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.BitcoinClientServiceIntegrationTests.NewTransactionClientStandaloneTest_TestsIfTheRaisedEventForNewTransactionSendsTheCorrectData_VerifiesThroughReturnedValue" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.EndToEndTests.Scenario2Test_TestsScenario2AndItsOutcome_VerifiesThroughMarketDataOrderAndTradesResults" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.DogecoinClientServiceIntegrationTests.NewTransactionClientStandaloneTest_TestsIfTheRaisedEventForNewTransactionSendsTheCorrectData_VerifiesThroughReturnedValue" /><Add Test="CoinExchange.IdentityAccess.Port.Adapter.Rest.IntegrationTests.SecurityKeysControllerTests.CreateUsergeneratedSystemKey_ProvideAllParameters_TheKeysShouldBeReturned" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderbookReplayTests.ReplayOrderBook_IfScenario2IsExecuted_VerifyTheWholeSystemState" /><Add Test="CoinExchange.Trades.Domain.Model.Tests.LimitOrderBookTests.BuyMarketOrderReject_CHecksIfOrderGetsRejectedWhenNoLimitOrdersAreOnBook_VerifiesThroughOrdersState" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.SellOrdersMatchTest_ChecksWhetherLimitOrderBookGetsUpdatedAtTheMemoryImageWhenIncomingSellOrderMatches_VerifiesThroughTheListsInOrderBookMemoryImage" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.GetClosedOrdersAndIncludeTrades_RetreivesTheListOfClosedOrdersAndListOfTradesFromTheDatabase_VerifiesThatResultingOrdersAreInExpectedRange" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.BitcoinClientServiceIntegrationTests.CheckBalanceTest_TestIfBalanceIsCheckedAndReturnedProperly_VerifiesThroughReturnedValue" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.CancelSellThenCancelAgainTest_FirstCancelShouldSucceedSecondShouldFail_VerifiesThroughTheResponse" /><Add Test="CoinExchange.Trades.ReadModel.Tests.OrderBookMemoryImageTests.CheckAskBookPrices_ChecksWhetherOrderOfAsksPricesIsSortedAsTheLimitOrderBook_VerifiesImageListsToConfirm" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.BitcoinClientServiceIntegrationTests.CreateNewAddressTest_TestsWhetherTheServiceCreatesNewAddressSuccessfullyOrNot_VerifiesByTheReturnedResult" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.GetOpenOrdersAndIncludeTrades_RetreivesTheListOfOpenOrdersAndListOfTradesFromTheDatabase_VerifiesThatResultingOrdersAreInExpectedRange" /><Add Test="CoinExchange.IdentityAccess.Infrastructure.IntegrationTests.EmailServiceIntegrationTests.ReActivationEmailSendingTest" /><Add Test="CoinExchange.Funds.Port.Adapter.Rest.IntegrationTests.DepositControllerIntegrationTests.DepositAddressTest_NewAddressMustBeGenerated_VerifiesThroughDatabaseQueryAndReturnValue" /><Add Test="CoinExchange.IdentityAccess.Port.Adapter.Rest.IntegrationTests.UserControllerTests.ChangeSettingsFailTest_ChecksThatUserLogsInThenLogsOutAndThenTriesToChangeSettingsAgainUsingTheSameApiKeyThenExceptionShouldBeThrown_VerifiesAndAssertsTheReturnedValueAndQueriesDatabase" /><Add Test="CoinExchange.IdentityAccess.Port.Adapter.Rest.IntegrationTests.UserControllerTests.ChangePasswordTest_MakesSureTheAccountActivaitonIsCancelledProvidedWithTheCorrectCredentials_VerifiesByTheReturnedValueAndQueryingDatabase" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.GetOpenOrders_RetreivesTheListOfOpenOrdersFromTheDatabase_VerifiesThatResultingOrdersAreInExpectedRange" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderbookReplayTests.ReplayOrderBook_IfScenario1IsExecuted_VerifyTheWholeSystemState" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.GetClosedOrders_RetreivesTheListOfClosedOrdersFromTheDatabase_VerifiesThatResultingOrdersAreInExpectedRange" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.CancelBuyOrdersTest_ChecksWhetherLimitOrderBookGetsUpdatedAtTheMemoryImageABuyIsCancelled_VerifiesThroughTheListsInOrderBookMemoryImage" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.BitcoinClientServiceIntegrationTests.CommitWithdrawTest_TestsIfTheWithdrawalIsMadeAsExpected_VerifiesTheReturnedResponseAndCheskTheBlockChainToConfirm" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.TradeControllerTests.GetTradesForTraderBetweenTimeRangeTest_TestsTheMethodThatWillGetAllTradesForACurrencypair_AssertsTheValuesOfTheFetchedTrades" /><Add Test="CoinExchange.IdentityAccess.Infrastructure.IntegrationTests.MfaSmsServiceIntegartionTests.SmsSendingService_VerifiesThatTheServiceSendsSmsAsExpected_VerifiesByTheReturnedValue" /><Add Test="CoinExchange.Trades.ReadModel.Tests.OrderBookMemoryImageTests.BuyOrdersPartiallyFilledTest_ChecksIfFilledOrdersAreRepresentedCorrectlyInBidBooksVolumes_VerifiesThroughBidBookOutput" /><Add Test="CoinExchange.IdentityAccess.Infrastructure.IntegrationTests.MfaSubscriptionRepositoryIntegrationTests.GetAllSubscriptionsTest_GetsTheListOfAllTheSubscriptions_VerifiesThroughDatabaseQuery" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.SendNewBuyOrderTest_TestsTheReturnedOrderRepresentationIfItIsAsExpected_VerfiesTheSubmittedState" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.MarketDataControllerTests.SendSomeOrders_IfOrdersAreMatching_OhlcAndTickerInfoWillBeFormed" /><Add Test="CoinExchange.Trades.ReadModel.Tests.OrderBookMemoryImageTests.InitializeOrderBookRepresentationForACurrency_ChecksWhetherTheOrderRepresentationBooksInitializeForCurrencies_VerifiesUsingMemoryImage" /><Add Test="CoinExchange.Trades.ReadModel.Tests.OrderBookMemoryImageTests.SellOrdersPartiallyFilledTest_ChecksIfFilledOrdersAreRepresentedCorrectlyInAskBooksVolumes_VerifiesThroughAskBookOutput" /><Add Test="CoinExchange.Trades.ReadModel.Persistence.Tests.CurrencyPairRepositoryTests.GetCurrencyPair_IfGetByIdIsCalled_CurrencyPairShouldRetrieveFromDatabase" /><Add Test="CoinExchange.IdentityAccess.Port.Adapter.Rest.IntegrationTests.UserControllerTests.ChangeSettingSuccessfulTest_ChecksThatIfTheSettingsChangeForTheUserOnTheGivenParameters_ChecksThroughDatabaseQuerying" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.CancelSellOrderFailTest_CancelsAnOrderAndExpectsItToReturnExceptionMessage_VerifiesTheReponsesState" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.CancelBuyOrderTest_CancelsAnOrderAndChecksTheReponse_VerifiesTheReponsesState" /><Add Test="CoinExchange.Funds.Port.Adapter.Rest.IntegrationTests.DepositControllerIntegrationTests.DepositTest_NewAddressMustBeGenerated_VerifiesThroughDatabaseQueryAndReturnValue" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.DogecoinClientServiceIntegrationTests.CheckBalanceTest_TestIfBalanceIsCheckedAndReturnedProperly_VerifiesThroughReturnedValue" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.MarketDataControllerTests.GetRateEndToEndTests_SubmitsOrdersAndChecksTheRateForOneCurrencyPair_VerifiesThroughTheReturnedRate" /><Add Test="CoinExchange.IdentityAccess.Port.Adapter.Rest.IntegrationTests.UserControllerTests.GetAccountSettingSuccessfulTest_ChecksThatTheAccountSettingsAreReceivedAsExpected_ChecksThroughDatabaseQuerying" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.TradeControllerTests.GetTradesForTraderTest_TestsTheMethodThatWillGetAllTradesForACurrencypair_AssertsTheValuesOfTheFetchedTrades" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.BuyMarketOrderPartialFillTest_ChecksIfPartialOrderGetsRejectedAfterBeingPOartiallyFilledWhenNoMoreLimitOrdersAreOnBook_VerifiesByCheckingOrderBookAndOrders" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.DogecoinClientServiceIntegrationTests.CommitWithdrawTest_TestsIfTheWithdrawalIsMadeAsExpected_VerifiesTheReturnedResponseAndCheskTheBlockChainToConfirm" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.TradeControllerTests.GetAllTradesTest_TestsTheMethodThatWillGetAllTradesForACurrencypair_AssertsTheValuesOfTheFetchedTrades" /><Add Test="CoinExchange.IdentityAccess.Infrastructure.IntegrationTests.MfaCodeGenerationServiceIntegrationTests.MfaCodeUniquenessTest_TestsTheMfaCodeGenerationServiceToGenerateUniqueNumbers_VerifiesByComparingOlderCreatedValues" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.BuyOrdersPartialFillTest_ChecksWhetherLimitOrderBookGetsUpdatedAtTheMemoryImageWhenIncomingBuyOrdersMatchParitally_VerifiesThroughTheListsInOrderBookMemoryImage" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.DogecoinClientServiceIntegrationTests.DepositCheckNewTransactionsTest_TestIfDepositHandlingIsDoneAsExpected_VerifiesThroughReturnedValue" /><Add Test="CoinExchange.IdentityAccess.Port.Adapter.Rest.IntegrationTests.TierControllerTests.GetTier3Detials_IfTier3IsNotVerified_InvalidOperationExceptionShouldBeThrown" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.NewOrderOnExchangeTest_ChecksWhetherLimitOrderBookGetsReceviedAtTheMemoryImage_VerifiesThroughTheListsInOrderBookMemoryImage" /><Add Test="CoinExchange.Trades.ReadModel.Tests.OrderBookMemoryImageTests.CheckAskBookVolumes_ChecksWhetherOrderOfAsksPricesIsSameAsTheLimitOrderBook_VerifiesImageListsToConfirm" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.BBOMemoryImageIntegrationTests.CancelBidsAndAsks_VerifyAfterCancellingThatTheBboIsUpdated_VerifiesUsingMemoryImagesLists" /><Add Test="CoinExchange.Funds.Port.Adapter.Rest.IntegrationTests.WithdrawControllerIntegrationTests.WithdrawControllerInitializationTest_ChecksIfTheControllerInitializesAsExpected_VerifiesThroughInstance" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.DogecoinClientServiceIntegrationTests.CreateNewAddressTest_TestsWhetherTheServiceCreatesNewAddressSuccessfullyOrNot_VerifiesByTheReturnedResult" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.CancelSellOrdersTest_ChecksWhetherLimitOrderBookGetsUpdatedAtTheMemoryImageWhenASellIsCancelled_VerifiesThroughTheListsInOrderBookMemoryImage" /><Add Test="CoinExchange.Funds.Infrastructure.Services.IntegrationTests.BitcoinClientServiceIntegrationTests.DepositCheckNewTransactionsTest_TestIfDepositHandlingIsDoneAsExpected_VerifiesThroughReturnedValue" /><Add Test="CoinExchange.Funds.Port.Adapter.Rest.IntegrationTests.DepositControllerIntegrationTests.DepositControllerInitializationTest_ChecksIfTheControllerInitializesAsExpected_VerifiesThroughInstance" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.SendNewSellOrderTest_TestsTheReturnedOrderRepresentationIfItIsAsExpected_VerfiesTheSubmittedState" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.EndToEndTests.Scenario3Test_TestsScenario3AndItsOutcome_VerifiesThroughMarketDataOrderAndTradesResults" /><Add Test="CoinExchange.IdentityAccess.Port.Adapter.Rest.IntegrationTests.TierControllerTests.GetTier2Detials_IfTier1IsNotVerified_InvalidOperationExceptionShouldBeThrown" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.BuyOrdersMatchTest_ChecksWhetherLimitOrderBookGetsUpdatedAtTheMemoryImageWhenIncomingBuyOrderMatches_VerifiesThroughTheListsInOrderBookMemoryImage" /><Add Test="CoinExchange.Trades.ReadModel.Tests.OrderBookMemoryImageTests.CheckBidBookPrices_ChecksWhetherOrderOfBidsPricesIsSortedAsTheLimitOrderBook_VerifiesImageListsToConfirm" /><Add Test="CoinExchange.Trades.ReadModel.Tests.OrderBookMemoryImageTests.CheckBidBookVolumes_ChecksWhetherOrderOfBidsVolumeIsSortedAsTheLimitOrderBook_VerifiesImageListsToConfirm" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.CancelSellOrderTest_CancelsAnOrderAndChecksTheReponse_VerifiesTheReponsesState" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.EndToEndTests.Scenario1Test_TestsScenario1AndItsOutcome_VerifiesThroughMarketDataOrderAndTradesResults" /><Add Test="CoinExchange.Funds.Application.IntegrationTests.ClientInteractionServiceIntegrationTests.LtcDepositConfirmedTest_TestsThatDepositArrivedAndDepositConfirmedEventsAreRaisedFromTheClient_VerifiesByHandlingEvent" /><Add Test="CoinExchange.Funds.Application.IntegrationTests.ClientInteractionServiceIntegrationTests.LtcDepositArrivedTest_TestsThatDepositArrivedEventIsRaisedFromTheClient_VerifiesByHandlingEvent" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.CancelBuyThenCancelAgainTest_FirstCancelShouldSucceedSecondShouldFail_VerifiesThroughTheResponse" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.CancelBuyOrderFailTest_CancelsAnOrderAndExpectsItToReturnExceptionMessage_VerifiesTheReponsesState" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.SellOrdersPartialFillTest_ChecksWhetherLimitOrderBookGetsUpdatedAtTheMemoryImageWhenIncomingSellOrdersMatchParitally_VerifiesThroughTheListsInOrderBookMemoryImage" /><Add Test="CoinExchange.Funds.Infrastucture.NHibernate.IntegrationTests.DatabasePersistenceTests.WithdrawDatabasePersistenceTests.SaveWithdrawalsAndRetreiveByAccountIdTest_SavesMultipleObjectInDatabase_ChecksIfTheoutputIsAsExpected" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.DepthMemoryImageIntegrationTests.CancelBuyAndSellOrders_ChecksIfDepthMemoryImageGetsUpdatedWhenBuyAndSellOrdersAreCancelled_VerifiesDepthMemroyImagesLists" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.OrderControllerTests.SellMarketOrderPartialFillTest_ChecksIfPartialOrderGetsRejectedAfterBeingPOartiallyFilledWhenNoMoreLimitOrdersAreOnBook_VerifiesByCheckingOrderBookAndOrders" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.MarketDataControllerTests.GetRatesEndToEndTests_SubmitsOrdersAndChecksTheRatesForCurrencyPairs_VerifiesThroughTheReturnedRatesList" /><Add Test="CoinExchange.Trades.ReadModel.IntegrationTests.OrderBookMemoryImageIntegrationTests.ManualOrderBookSendTest_ManuallySendsTheOrderBook_VerifiesIfTheOrderBookIsReceivedByTheDisruptorsEventHandlerMemoryImage" /><Add Test="CoinExchange.Trades.Port.Adapter.Rest.IntegrationTests.MarketDataControllerTests.SubmitsThenCancelsOrders_ChecksOrderBook_AssertsOnExpectedValues" /></Playlist>